{"version":3,"sources":["GoodsList.tsx","utils/httpClient.ts","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","React","memo","_ref","goods","_jsx","children","map","good","style","color","name","id","API_URL","getAll","fetch","then","response","ok","Error","json","GoodFilter","App","_useState","useState","All","_useState2","_slicedToArray","goodFilter","setGoodFilter","_useState3","_useState4","setGoods","memoizedGoods","useMemo","handleGoodFilterChanged","filter","useEffect","First5","sort","good1","good2","localeCompare","sortedGoods","slice","OnlyRed","goodsAPI","_jsxs","className","onClick","type","ReactDOM","render","document","getElementById"],"mappings":"iNAOaA,EAA6BC,IAAMC,MAAK,SAAAC,GAAgB,IAAbC,EAAKD,EAALC,MACtD,OACEC,cAAA,MAAAC,SACGF,EAAMG,KAAI,SAAAC,GAAI,OACbH,cAAA,MAAkB,UAAQ,OAAOI,MAAO,CAAEC,MAAOF,EAAKE,OAAQJ,SAC3DE,EAAKG,MADCH,EAAKI,GAET,KAIb,ICjBMC,EAAU,6DCKT,SAASC,IACd,ODHOC,MAAMF,ECGE,eDFZG,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,gBAGlB,OAAOF,EAASG,MAClB,GCHJ,CAEO,ICHIC,EAAU,SAAVA,GAAU,OAAVA,IAAU,aAAVA,IAAU,mBAAVA,IAAU,qBAAVA,CAAU,EAAVA,GAAU,IAMRC,EAAgB,WAC3B,IAAAC,EAAoCC,mBAASH,EAAWI,KAAIC,EAAAC,YAAAJ,EAAA,GAArDK,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAChCI,EAA0BN,mBAAiB,IAAGO,EAAAJ,YAAAG,EAAA,GAAvC1B,EAAK2B,EAAA,GAAEC,EAAQD,EAAA,GAChBE,EAAgBC,mBAAQ,WAC5B,OAAO9B,CACT,GAAG,CAACA,IAEE+B,EAA0B,SAACC,GAC3BA,IAAWR,GACbC,EAAcO,EAElB,EAkBA,OAhBAC,qBAAU,WACR,OAAQT,GACN,KAAKP,EAAWiB,ODjBbxB,IACJE,MAAK,SAAAZ,GACJ,OAAOA,EAAMmC,MAAK,SAACC,EAAOC,GACxB,OAAOD,EAAM7B,KAAK+B,cAAcD,EAAM9B,KACxC,GACF,IACCK,MAAK,SAAA2B,GAAW,OAAIA,EAAYC,MAAM,EAAG,EAAE,ICYnB5B,KAAKgB,GAC1B,MAEF,KAAKX,EAAWwB,QDXb/B,IACJE,MAAK,SAAAZ,GAAK,OAAIA,EAAMgC,QAAO,SAAA5B,GAAI,MAAmB,QAAfA,EAAKE,KAAe,GAAC,ICW9BM,KAAKgB,GAC5B,MAEF,QACEc,IAAkB9B,KAAKgB,GAG7B,GAAG,CAACJ,IAGFmB,eAAA,OAAKC,UAAU,MAAK1C,SAAA,CAClBD,cAAA,MAAAC,SAAI,0BAEJD,cAAA,UACE4C,QAAS,WACPd,EAAwBd,EAAWI,IACrC,EACAyB,KAAK,SACL,UAAQ,aAAY5C,SACrB,mBAIDD,cAAA,UACE4C,QAAS,WACPd,EAAwBd,EAAWiB,OACrC,EACAY,KAAK,SACL,UAAQ,oBAAmB5C,SAC5B,uBAIDD,cAAA,UACE4C,QAAS,WACPd,EAAwBd,EAAWwB,QACrC,EACAK,KAAK,SACL,UAAQ,aAAY5C,SACrB,mBAIDD,cAACL,EAAS,CAACI,MAAO6B,MAGxB,EC3EAkB,IAASC,OACP/C,cAACiB,EAAG,IACJ+B,SAASC,eAAe,Q","file":"static/js/main.c84503e1.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = React.memo(({ goods }) => {\n  return (\n    <ul>\n      {goods.map(good => (\n        <li key={good.id} data-cy=\"good\" style={{ color: good.color }}>\n          {good.name}\n        </li>\n      ))}\n    </ul>\n  );\n});\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-goods';\n\nexport function getData<T>(url: string): Promise<T> {\n  return fetch(API_URL + url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Server error');\n      }\n\n      return response.json();\n    });\n}\n","import { Good } from '../types/Good';\nimport { getData } from '../utils/httpClient';\n\n// eslint-disable-next-line\n\nexport function getAll(): Promise<Good[]> {\n  return getData('/goods.json');\n}\n\nexport const get5First = (): Promise<Good[]> => {\n  return getAll()\n    .then(goods => {\n      return goods.sort((good1, good2) => {\n        return good1.name.localeCompare(good2.name);\n      });\n    })\n    .then(sortedGoods => sortedGoods.slice(0, 5));\n};\n\nexport const getRedGoods = (): Promise<Good[]> => {\n  return getAll()\n    .then(goods => goods.filter(good => good.color === 'red'));\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\nimport * as goodsAPI from './api/goods';\nimport { Good } from './types/Good';\n\nconst enum GoodFilter {\n  All,\n  First5,\n  OnlyRed,\n}\n\nexport const App: React.FC = () => {\n  const [goodFilter, setGoodFilter] = useState(GoodFilter.All);\n  const [goods, setGoods] = useState<Good[]>([]);\n  const memoizedGoods = useMemo(() => {\n    return goods;\n  }, [goods]);\n\n  const handleGoodFilterChanged = (filter: GoodFilter) => {\n    if (filter !== goodFilter) {\n      setGoodFilter(filter);\n    }\n  };\n\n  useEffect(() => {\n    switch (goodFilter) {\n      case GoodFilter.First5:\n        goodsAPI.get5First().then(setGoods);\n        break;\n\n      case GoodFilter.OnlyRed:\n        goodsAPI.getRedGoods().then(setGoods);\n        break;\n\n      default:\n        goodsAPI.getAll().then(setGoods);\n        break;\n    }\n  }, [goodFilter]);\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n\n      <button\n        onClick={() => {\n          handleGoodFilterChanged(GoodFilter.All);\n        }}\n        type=\"button\"\n        data-cy=\"all-button\"\n      >\n        Load all goods\n      </button>\n\n      <button\n        onClick={() => {\n          handleGoodFilterChanged(GoodFilter.First5);\n        }}\n        type=\"button\"\n        data-cy=\"first-five-button\"\n      >\n        Load 5 first goods\n      </button>\n\n      <button\n        onClick={() => {\n          handleGoodFilterChanged(GoodFilter.OnlyRed);\n        }}\n        type=\"button\"\n        data-cy=\"red-button\"\n      >\n        Load red goods\n      </button>\n\n      <GoodsList goods={memoizedGoods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}